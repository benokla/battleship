(()=>{"use strict";const e=()=>{let e=[];for(let t=0;t<10;t++){e.push([""]);for(let r=0;r<9;r++)e[t].push("")}let t=[];return{placeShips:function(r,o,n,a){console.log(r,o,n,a),r=Number(r),o=Number(o);let l=(e=>{let t=[];for(let e=0;e<10;e++){t.push([""]);for(let r=0;r<10;r++)t[e].push("")}return{length:e,isSunk:function(){let r=0;for(let e=0;e<10;e++)for(let o=0;o<10;o++)""!=t[e][o]&&r++;return r>=e},hit:function(e,r){t[r][e]="hit"},hits:t}})(n);if(t.push(l),"h"==a){if(r+n>9)return;for(let t=0;t<n;t++){if(""!=e[o][r]){for(;t>0;)r--,e[o][r]="",t--;return}e[o][r]=l,r++}}else if("v"==a){if(o+n>9)return;for(let t=0;t<n;t++){if(""!=e[o][r]){for(;t>0;)o--,e[o][r]="",t--;return}e[o][r]=l,o++}}return!0},gameboard:e,receiveAttack:function(t,r){return""!=e[r][t]?(e[r][t].hit(t,r),[!0,t,r]):[!1,t,r]},allShipsSunk:function(){return!t.map((e=>e.isSunk())).includes(!1)}}},t=(()=>{const e=document.querySelector(".info");return{displayBoard:function(e,t){e.innerHTML="";for(let r=0;r<10;r++)for(let o=0;o<10;o++){const n=document.createElement("div");n.dataset.posX=o,n.dataset.posY=r,n.classList.add("field"),e.appendChild(n),n.textContent=""==t[r][o]?"":"X"}},markBoard:function(e,t,r,o,n){if(0==n){let o=document.querySelector(".myGameboard").querySelectorAll(".field"),n=Array.from(o).find((e=>e.dataset.posX==t&&e.dataset.posY==r));e?n.classList.add("hit"):n.classList.add("miss")}else e?n.target.classList.add("hit"):n.target.classList.add("miss")},showMessage:function(t){e.textContent=t}}})(),r=e=>({name:e,swapTurn:function(){return!0},turn:!1});(()=>{const o=document.querySelector(".myGameboard"),n=document.querySelector(".pcGameboard"),a=document.querySelector("#addShipBtn"),l=document.querySelector("#posXInput"),s=document.querySelector("#posYInput");let u=[3,4,5,3];const i=e(),d=e(),c=r("Jakob");r("PC"),t.displayBoard(o,i.gameboard),t.displayBoard(n,d.gameboard),c.turn=c.swapTurn();let f=o.querySelectorAll(".field");console.log(f);let p=0;a.addEventListener("click",(e=>{i.placeShips(l.value,s.value,u[p],"h")&&(t.displayBoard(o,i.gameboard),p++)}));let m=0,h="";for(;m<u.length;)h=1==y(2)?"v":"h",d.placeShips(y(9),y(9),u[m],h)&&m++;function y(e){return Math.floor(Math.random()*e)}t.displayBoard(n,d.gameboard),n.querySelectorAll(".field").forEach((e=>{e.addEventListener("click",(e=>{c.turn}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,