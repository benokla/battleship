(()=>{"use strict";const e=()=>{let e=[];for(let t=0;t<10;t++){e.push([""]);for(let o=0;o<9;o++)e[t].push("")}let t=[];return{placeShips:function(o,a,n,r){o=Number(o),a=Number(a);let s=(e=>{let t=[];for(let e=0;e<10;e++){t.push([""]);for(let o=0;o<9;o++)t[e].push("")}return{length:e,isSunk:function(){let o=0;for(let e=0;e<10;e++)for(let a=0;a<10;a++)""!=t[e][a]&&o++;return o>=e},hit:function(e,o){t[o][e]="hit"},hits:t}})(n);if(t.push(s),"h"==r){if(o+n>9)return;for(let t=0;t<n;t++){if(""!=e[a][o]){for(;t>0;)o--,e[a][o]="",t--;return}e[a][o]=s,o++}}else if("v"==r){if(a+n>9)return;for(let t=0;t<n;t++){if(""!=e[a][o]){for(;t>0;)a--,e[a][o]="",t--;return}e[a][o]=s,a++}}return!0},gameboard:e,receiveAttack:function(t,o){return""!=e[o][t]?(e[o][t].hit(t,o),[!0,t,o]):[!1,t,o]},allShipsSunk:function(){return!t.map((e=>e.isSunk())).includes(!1)}}},t=(()=>{const e=document.querySelector(".info");return{displayBoard:function(e,t){e.innerHTML="";for(let o=0;o<10;o++)for(let a=0;a<10;a++){const n=document.createElement("div");n.dataset.posX=a,n.dataset.posY=o,n.classList.add("field"),e.appendChild(n),n.textContent=""==t[o][a]?"":"X"}},markBoard:function(e,t,o,a,n){if(0==n){let a=document.querySelector(".myGameboard").querySelectorAll(".field"),n=Array.from(a).find((e=>e.dataset.posX==t&&e.dataset.posY==o));e?n.classList.add("hit"):n.classList.add("miss")}else e?n.target.classList.add("hit"):n.target.classList.add("miss")},showMessage:function(t){e.textContent=t}}})();(()=>{const o=document.querySelector(".myGameboard"),a=document.querySelector(".pcGameboard"),n=document.querySelector("#addShipBtn"),r=document.querySelector("#posXInput"),s=document.querySelector("#posYInput"),i=document.querySelector("#randomBtn"),l=document.querySelector("#orientationBtn");let d=!1,u=[3,4,5,3],c=e(),h=e();const f={swapTurn:function(){return!0},turn:!1};t.displayBoard(o,c.gameboard),t.displayBoard(a,h.gameboard),m(h),t.displayBoard(a,h.gameboard),f.turn=f.swapTurn();let p=0;function m(e){let t=0,o="";for(;t<u.length;)o=1==k(2)?"v":"h",e.placeShips(k(9),k(9),u[t],o)&&t++}function g(){h=e(),m(h),t.displayBoard(a,h.gameboard),c=e(),t.displayBoard(o,c.gameboard)}function S(){if(y())return;let e=c.receiveAttack(k(9),k(9));e[0]?t.showMessage(`PC shot on the coordinates ${e[1]} ${e[2]} and ... hit!`):t.showMessage(`PC shot on the coordinates ${e[1]} ${e[2]} and ... missed.`),t.markBoard(e[0],e[1],e[2],c,!1),f.turn=f.swapTurn()}function y(){return console.log(c.gameboard),!(!c.allShipsSunk()&&!h.allShipsSunk()||(d=!1,0))}function k(e){return Math.floor(Math.random()*e)}n.addEventListener("click",(function(){c.placeShips(r.value,s.value,u[p],l.value)&&(t.displayBoard(o,c.gameboard),p++,t.showMessage("Next ship has length of "+u[p]),p>=u.length&&(d=!0,t.showMessage("Click on the enemy board to shoot")))})),l.addEventListener("click",(function(){"Vertical"==l.textContent?(l.value="v",l.textContent="Horizontal"):"Horizontal"==l.textContent&&(l.value="h",l.textContent="Vertical")})),i.addEventListener("click",(()=>{d||(c=e(),m(c),t.displayBoard(o,c.gameboard),t.showMessage("Click on the enemy board to shoot"),d=!0)})),a.querySelectorAll(".field").forEach((e=>{e.addEventListener("click",(e=>{if(f.turn&&d){let o=h.receiveAttack(e.target.dataset.posX,e.target.dataset.posY);if(o[0]?t.showMessage(`You shot on the coordinates ${o[1]} ${o[2]} and ... hit!`):t.showMessage(`You shot on the coordinates ${o[1]} ${o[2]} and ... missed.`),t.markBoard(o[0],o[1],o[2],h,e),y()){h.allShipsSunk()?(t.showMessage("You won. Next game already started."),g()):c.allShipsSunk()&&(t.showMessage("The PC won. Next game already started."),g());let e=0,o="";for(;e<u.length;)o=1==k(2)?"v":"h",h.placeShips(k(9),k(9),u[e],o)&&e++;return}f.turn=!1,setTimeout(S,2e3)}}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,