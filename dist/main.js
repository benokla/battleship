(()=>{"use strict";const e=()=>{let e=[];for(let t=0;t<10;t++){e.push([""]);for(let s=0;s<9;s++)e[t].push("")}let t=[];return{placeShips:function(s,o,a,n){let r=(e=>{let t=[];for(let e=0;e<10;e++){t.push([""]);for(let s=0;s<10;s++)t[e].push("")}return{length:e,isSunk:function(){let s=0;for(let e=0;e<10;e++)for(let o=0;o<10;o++)""!=t[e][o]&&s++;return s>=e},hit:function(e,s){t[s][e]="hit"},hits:t}})(a);if(t.push(r),"h"==n){if(s+a>9)return;e[o][s]=r;for(let t=1;t<a;t++)s++,e[o][s]=r}else if("v"==n){if(o+a>9)return;e[o][s]=r;for(let t=1;t<a;t++)o++,e[o][s]=r}},gameboard:e,receiveAttack:function(t,s){if(""!=e[s][t])return e[s][t].hit(t,s),[!0,t,s];{let e=[!1,t,s];return console.log("Its a miss"),e}},allShipsSunk:function(){return!t.map((e=>e.isSunk())).includes(!1)}}},t=(()=>{const e=document.querySelector(".info");return{displayBoard:function(e,t){for(let s=0;s<t.length;s++)for(let o=0;o<t[s].length;o++){const a=document.createElement("div");a.dataset.posX=o,a.dataset.posY=s,a.classList.add("field"),e.appendChild(a),a.textContent=""==t[s][o]?"":"X"}},markBoard:function(e,t,s,o,a){if(0==a){let o=document.querySelector(".myGameboard").querySelectorAll(".field"),a=Array.from(o).find((e=>e.dataset.posX==t&&e.dataset.posY==s));e?a.classList.add("hit"):a.classList.add("miss")}else e?a.target.classList.add("hit"):a.target.classList.add("miss")},showMessage:function(t){e.textContent=t}}})(),s=e=>({name:e,swapTurn:function(){return!0},turn:!1});(()=>{const o=document.querySelector(".myGameboard"),a=document.querySelector(".pcGameboard"),n=e(),r=e(),i=s("Jakob");function l(){if(u())return;let e=n.receiveAttack(d(9),d(9));e[0]?t.showMessage(`PC shot on the coordinates ${e[1]} ${e[2]} and ... hit!`):t.showMessage(`PC shot on the coordinates ${e[1]} ${e[2]} and ... missed.`),t.markBoard(e[0],e[1],e[2],n,!1),i.swapTurn()}function u(){return!(!n.allShipsSunk()&&!r.allShipsSunk())}function d(e){return Math.floor(Math.random()*e)}s("PC"),n.placeShips(3,3,3,"h"),n.placeShips(7,5,3,"v"),r.placeShips(3,3,3,"h"),r.placeShips(7,5,3,"v"),t.displayBoard(o,n.gameboard),t.displayBoard(a,r.gameboard),i.turn=i.swapTurn(),a.querySelectorAll(".field").forEach((e=>{e.addEventListener("click",(e=>{if(i.turn){let s=r.receiveAttack(e.target.dataset.posX,e.target.dataset.posY);if(s[0]?t.showMessage(`You shot on the coordinates ${s[1]} ${s[2]} and ... hit!`):t.showMessage(`You shot on the coordinates ${s[1]} ${s[2]} and ... missed.`),t.markBoard(s[0],s[1],s[2],r,e),u())return void(r.allShipsSunk()?t.showMessage("You won"):t.showMessage("The PC won"));i.swapTurn(),console.log(i.turn),setTimeout(l,3e3)}}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,