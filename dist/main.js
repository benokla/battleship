(()=>{"use strict";const t=()=>{let t=[];for(let e=0;e<10;e++){t.push([""]);for(let r=0;r<9;r++)t[e].push("")}let e=[];return{placeShips:function(r,n,a,o){let l=(t=>{let e=[];for(let t=0;t<10;t++){e.push([""]);for(let r=0;r<10;r++)e[t].push("")}return{length:t,isSunk:function(){let r=0;for(let t=0;t<10;t++)for(let n=0;n<10;n++)""!=e[t][n]&&r++;return r>=t},hit:function(t,r){e[r][t]="hit"},hits:e}})(a);if(e.push(l),"h"==o){if(r+a>9)return;t[n][r]=l;for(let e=1;e<a;e++)r++,t[n][r]=l}else if("v"==o){if(n+a>9)return;t[n][r]=l;for(let e=1;e<a;e++)n++,t[n][r]=l}},gameboard:t,receiveAttack:function(e,r){if(""==t[r][e]){let t="a";return console.log("Its a miss"),t}t[r][e].hit(e,r),console.log("Its a hit")},allShipsSunk:function(){return!e.map((t=>t.isSunk())).includes(!1)}}},e={displayBoard:function(t,e){for(let r=0;r<e.length;r++)for(let n=0;n<e[r].length;n++){const a=document.createElement("div");a.dataset.posX=n,a.dataset.posY=r,a.classList.add("field"),t.appendChild(a),a.textContent=""==e[r][n]?"":"X"}}},r=t=>({name:t,swapTurn:function(){return!0},turn:!1});(()=>{const n=document.querySelector(".myGameboard"),a=document.querySelector(".pcGameboard"),o=t(),l=t(),s=r("Jakob");function i(t){return Math.floor(Math.random()*t)}r("PC"),o.placeShips(3,3,3,"h"),o.placeShips(7,5,3,"v"),l.placeShips(3,3,3,"h"),l.placeShips(7,5,3,"v"),e.displayBoard(n,o.gameboard),e.displayBoard(a,l.gameboard),s.turn=s.swapTurn(),a.querySelectorAll(".field").forEach((t=>{t.addEventListener("click",(t=>{s.turn&&(l.receiveAttack(t.target.dataset.posX,t.target.dataset.posY),s.swapTurn(),o.receiveAttack(i(9),i(9)),s.swapTurn())}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,